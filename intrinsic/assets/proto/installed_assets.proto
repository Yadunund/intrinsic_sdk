// Copyright 2023 Intrinsic Innovation LLC

syntax = "proto3";

package intrinsic_proto.assets.v1;

import "google/longrunning/operations.proto";
import "intrinsic/assets/proto/asset_type.proto";
import "intrinsic/assets/proto/id.proto";
import "intrinsic/assets/proto/metadata.proto";
import "intrinsic/assets/services/proto/service_manifest.proto";

// Service to manage the installation of assets.
service InstalledAssets {

  // Lists the currently installed assets.
  rpc ListInstalledAssets(ListInstalledAssetsRequest)
      returns (ListInstalledAssetsResponse) {}

  // Gets a specific installed asset.
  rpc GetInstalledAsset(GetInstalledAssetRequest) returns (InstalledAsset) {}

  // Installs the specified asset into the solution.
  rpc CreateInstalledAssets(CreateInstalledAssetsRequest)
      returns (google.longrunning.Operation) {
    option (google.longrunning.operation_info) = {
      metadata_type: "CreateInstalledAssetsMetadata"
      response_type: "CreateInstalledAssetsResponse"
    };
  }
}

message ListInstalledAssetsRequest {
  message Filter {
    optional AssetType asset_type = 1;
  }

  int64 page_size = 1;
  string page_token = 2;
  optional Filter strict_filter = 3;
}

message InstalledAsset {
  Metadata metadata = 1;
}

message ListInstalledAssetsResponse {
  repeated InstalledAsset installed_assets = 1;

  // Pass this token to the subsequent list request to obtain the next page.
  string next_page_token = 2;
}

message GetInstalledAssetRequest {
  Id id = 1;
}

enum UpdatePolicy {
  // Use a default policy, which may change with platform updates.
  UPDATE_POLICY_UNSPECIFIED = 0;
  // Only add new assets to the solution and reject any that would
  // trigger an update of any installed asset.
  UPDATE_POLICY_ADD_NEW_ONLY = 10;
  // Only update assets if they are currently unused.
  UPDATE_POLICY_UPDATE_UNUSED = 20;
}

message CreateInstalledAssetsRequest {
  message Asset {
    oneof variant {
      intrinsic_proto.services.ProcessedServiceManifest service = 2;
    }
  }

  repeated Asset assets = 1;
  UpdatePolicy policy = 2;
}

message CreateInstalledAssetsMetadata {}

message CreateInstalledAssetsResponse {}
