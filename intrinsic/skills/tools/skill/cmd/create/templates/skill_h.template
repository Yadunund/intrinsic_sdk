{{/*
Copyright 2023 Intrinsic Innovation LLC
*/ -}}

#ifndef {{.BazelPackageUpperSnakeCase}}_{{.SkillNameUpperSnakeCase}}_H_
#define {{.BazelPackageUpperSnakeCase}}_{{.SkillNameUpperSnakeCase}}_H_

#include <memory>
#include <string>
#include <utility>

#include "absl/container/flat_hash_map.h"
#include "absl/status/statusor.h"
#include "google/protobuf/message.h"
#include "intrinsic/skills/cc/skill_interface.h"

{{- /* Don't use a namespace when creating a skill adjacent to WORKSPACE because
it will be an anonymous namespace. It would prevent CreateSkill from being
callable from outside this translation unit. */}}
{{if .BazelPackage}}
namespace {{strJoin .BazelPackage "::"}} {
{{end}}
class {{.SkillNameUpperCamelCase}} : public intrinsic::skills::SkillInterface {
 public:

  // Factory method to create an instance of the skill.
  static std::unique_ptr<intrinsic::skills::SkillInterface> CreateSkill();

  // Returns the resources required for running this skill.
  //
  // Skill developers should override this method with their implementation.
  //
  // If a skill does not implement GetFootprint(), the default implementation
  // specifies that the skill needs exclusive access to everything. The skill
  // will therefore not be able to execute in parallel with any other skill.
  //
  // `request` the get footprint request.
  // `context` provides access to services that the skill may use.
  //
  // Returns the skill's footprint.
  absl::StatusOr<intrinsic_proto::skills::Footprint>
  GetFootprint(const intrinsic::skills::GetFootprintRequest& request,
              intrinsic::skills::GetFootprintContext& context) const override;

  // Previews the expected outcome of executing the skill.
  //
  // Preview() enables an application developer to perform a "dry run" of skill
  // execution (or execution of a process that includes that skill) in order to
  // preview the effect of executing the skill/process, but without any
  // real-world side-effects that normal execution would entail.
  //
  // Skill developers should override this method with their implementation. The
  // implementation will not have access to hardware resources that are provided
  // to Execute(), but will have access to a hypothetical world in which to
  // preview the execution. The implementation should return the expected output
  // of executing the skill in that world.
  //
  // If a skill does not override the default implementation, any process that
  // includes that skill will not be executable in "preview" mode.
  //
  // NOTE: In preview mode, the object world provided by the PreviewContext
  // is treated as the -actual- state of the physical world, rather than as the
  // belief state that it represents during normal skill execution. Because of
  // this difference, a skill in preview mode cannot introduce or correct
  // discrepancies between the physical and belief world (since they are
  // identical). For example, if a perception skill only updates the belief
  // state when it is executed, then its implementation of Preview() would
  // necessarily be a no-op.
  //
  // If executing the skill is expected to affect the physical world, then the
  // implementation should record the timing of its expected effects using
  // context.RecordWorldUpdate(). It should NOT make changes to the object
  // world via interaction with context.object_world().
  //
  // skill_interface_utils.h provides convenience utils that can be used to
  // implement Preview() in common scenarios. E.g.:
  // - PreviewViaExecute(): If executing the skill does not require resources or
  //   modify the world.
  //
  // `request` the preview request.
  // `context` provides access to services that the skill may use.
  //
  // If skill preview succeeds, the skill should return either the skill's
  // expected result proto message, or nullptr if the skill has no output.
  // If the skill fails for one of the following reasons, it should return the
  // specified error along with a descriptive and, if possible, actionable error
  // message:
  // - `absl::CancelledError` if the skill is aborted due to a cancellation
  //   request (assuming the skill supports the cancellation).
  // - `absl::InvalidArgumentError` if the arguments provided as skill
  //   parameters are invalid.
  //
  // Refer to absl status documentation for other errors:
  // https://github.com/abseil/abseil-cpp/blob/master/absl/status/status.h
  absl::StatusOr<std::unique_ptr<::google::protobuf::Message>>
  Preview(const intrinsic::skills::PreviewRequest& request,
          intrinsic::skills::PreviewContext& context) override;


  // Called once each time the skill is executed in a process.
  absl::StatusOr<std::unique_ptr<google::protobuf::Message>>
  Execute(const intrinsic::skills::ExecuteRequest& request,
          intrinsic::skills::ExecuteContext& context) override;
};
{{if .BazelPackage }}
}  // namespace {{strJoin .BazelPackage "::"}}
{{end}}
#endif  // {{.BazelPackageUpperSnakeCase}}_{{.SkillNameUpperSnakeCase}}_H_
