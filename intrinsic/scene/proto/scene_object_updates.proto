// Copyright 2023 Intrinsic Innovation LLC

syntax = "proto3";

package intrinsic_proto.scene_object.v1;

import "intrinsic/math/proto/pose.proto";

// Similar to SceneObjectUpdate but restricted in the types of updates that can
// be performed.
message SceneObjectInstanceUpdate {
  // The type of update to apply.
  oneof update {
    EntityPoseUpdate entity_pose = 1;
    CreateFrameUpdate create_frame = 2;
    // Only allowed to delete frames.
    DeleteEntityUpdate delete_entity = 3;
  }
}

// A list of updates to apply to a scene object instance.
message SceneObjectInstanceUpdates {
  // The updates to apply in order.
  repeated SceneObjectInstanceUpdate updates = 1;
}

message EntityPoseUpdate {
  // The name of the entity being updated.
  string entity_name = 1;

  // The new pose of this entity relative to its parent.
  intrinsic_proto.Pose parent_t_this = 2;
}

// Create a new frame based entity with the given parameters.
message CreateFrameUpdate {
  // The entity under which the frame shall be created. If the name is empty we
  // will create the new frame under root. If the name cannot be found this will
  // result in an error.
  string parent_name = 1;

  // Name of the new frame entity to be created.
  string new_frame_name = 2;

  // Pose of the frame in the space of the parent entity's origin.
  intrinsic_proto.Pose parent_t_new_frame = 3;

  // We can optionally mark this frame as an attachment frame when creating it.
  bool designate_as_attachment_frame = 4;
}

message DeleteEntityUpdate {
  // The entity to be deleted.
  string entity_name = 1;

  enum ChildPolicy {
    // Same as CHILD_POLICY_FAIL_IF_PRESENT.
    CHILD_POLICY_UNSPECIFIED = 0;
    // If the entity has children we will fail to delete it.
    CHILD_POLICY_FAIL_IF_PRESENT = 1;
    // If the entity has children we will delete them all recursively down.
    CHILD_POLICY_DELETE_RECURSIVELY = 2;
    // If the entity has children, they will be reparented to the parent of the
    // deleted entity maintaining the same pose to it as is currently set. If we
    // have a chain of entities A -> B -> C, and B -> D, where A is the parent
    // of B and B is the parent of C and D. When we delete B with this setting,
    // we will reparent C and D to A and maintain the same A_t_C and A_t_D poses
    // as was present before the delete.
    CHILD_POLICY_REPARENT_CHILDREN = 3;
  }
  // Specify what to do with the children of the deleted entity if any exist.
  ChildPolicy child_policy = 2;
}
