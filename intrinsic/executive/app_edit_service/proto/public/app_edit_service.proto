// Copyright 2023 Intrinsic Innovation LLC
// Intrinsic Proprietary and Confidential
// Provided subject to written agreement between the parties.

syntax = "proto3";

package intrinsic.application;

import "intrinsic/config/proto/ppr_refs.proto";
import "intrinsic/executive/proto/behavior_tree.proto";


service AppEditService {
  
  

  // Fetch the notebooks of the running application.
  rpc FetchProcessNotebooks(FetchProcessNotebooksRequest)
      returns (FetchProcessNotebooksResponse);

  // Fetch the behavior trees of the running application.
  rpc FetchProcessBehaviorTrees(FetchProcessBehaviorTreesRequest)
      returns (FetchProcessBehaviorTreesResponse);

  // Save the notebooks in the running application.
  // All notebooks in the process are removed and replaced by the given
  // notebooks. All other runnables are unaffected.
  rpc SaveProcessNotebooks(SaveProcessNotebooksRequest)
      returns (SaveProcessNotebooksResponse);

  // Add behavior trees to the current process. All existing runnables in the
  // process remain unaffected.
  rpc AddBehaviorTreesToProcess(AddBehaviorTreesToProcessRequest)
      returns (AddBehaviorTreesToProcessResponse);

  // Remove behavior trees from the current process.
  rpc RemoveBehaviorTreesFromProcess(RemoveBehaviorTreesFromProcessRequest)
      returns (RemoveBehaviorTreesFromProcessResponse);

  // Set the default runnable which should be loaded on start up.
  rpc SetDefaultRunnableToCurrentProcess(
      SetDefaultRunnableToCurrentProcessRequest)
      returns (SetDefaultRunnableToCurrentProcessResponse);

  // Get the list of current product part names.
  rpc GetCurrentProductParts(GetCurrentProductPartsRequest)
      returns (GetCurrentProductPartsResponse);

  // Adds a FileReference for this file to the data files of the current
  // process. The file content is uploaded to CAS on GCS.
  rpc SetProcessDataFile(SetProcessDataFileRequest)
      returns (SetProcessDataFileResponse) {}

  // Deletes the FileReference with the given Path from the data files of the
  // current process.
  rpc DeleteProcessDataFile(DeleteProcessDataFileRequest)
      returns (DeleteProcessDataFileResponse) {}

  // Changes the path of the FileReference with a matching path in the data
  // files of the current process.
  rpc RenameProcessDataFile(RenameProcessDataFileRequest)
      returns (RenameProcessDataFileResponse) {}
}

message FetchProcessNotebooksRequest {}

message FetchProcessNotebooksResponse {
  // A map with all process notebooks.
  // The key is the runnable key, the value is the URI of the notebook.
  map<string, string> notebooks = 1;
}

message SaveProcessNotebooksRequest {
  // A map with all process notebooks.
  // The key is the runnable key, the value is the URI of the notebook.
  map<string, string> notebooks = 1;
}

message SaveProcessNotebooksResponse {}

message FetchProcessBehaviorTreesRequest {}

message FetchProcessBehaviorTreesResponse {
  // A map with all process behavior trees.
  // The key is the runnable key, the value is the BehaviorTree.
  map<string, intrinsic_proto.executive.BehaviorTree> trees = 1;
}

message AddBehaviorTreesToProcessRequest {
  // A map with all behavior trees which should be added.
  // The key is the runnable key, the value is the behavior tree proto.
  map<string, intrinsic_proto.executive.BehaviorTree> trees = 1;
}

message AddBehaviorTreesToProcessResponse {}

message RemoveBehaviorTreesFromProcessRequest {
  // A list with all behavior trees which should be removed.
  repeated string trees = 1;
}

message RemoveBehaviorTreesFromProcessResponse {}

message SetDefaultRunnableToCurrentProcessRequest {
  string runnable_key = 1;
  bool autostart = 2;
}

message SetDefaultRunnableToCurrentProcessResponse {}

message GetCurrentProductPartsRequest {}

message GetCurrentProductPartsResponse {
  repeated intrinsic_proto.config.ProductPartReference parts = 1;
}

message SetProcessDataFileRequest {
  // The file content.
  bytes content = 1;
  // The filepath in the conatiner filesystem.
  // For jupyter data files this is /tmp/data/<filename>
  string path = 2;
}

message SetProcessDataFileResponse {}

message DeleteProcessDataFileRequest {
  // The filepath in the conatiner filesystem.
  string path = 1;
}

message DeleteProcessDataFileResponse {}

message RenameProcessDataFileRequest {
  // The old filepath in the conatiner filesystem.
  string old_path = 1;
  // The new filepath in the conatiner filesystem.
  string new_path = 2;
}

message RenameProcessDataFileResponse {}
